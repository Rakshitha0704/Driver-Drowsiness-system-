import cv2
import mediapipe as mp
import numpy as np
import winsound   

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False,
                                  max_num_faces=1,
                                  refine_landmarks=True,
                                  min_detection_confidence=0.5,
                                  min_tracking_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

LEFT_EYE = [33, 160, 158, 133, 153, 144]
RIGHT_EYE = [362, 385, 387, 263, 373, 380]
MOUTH = [78, 308, 14, 13, 312, 82, 87, 317]


def eye_aspect_ratio(eye):
    # Vertical distances
    A = np.linalg.norm(eye[1] - eye[5])
    B = np.linalg.norm(eye[2] - eye[4])
    C = np.linalg.norm(eye[0] - eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

def mouth_aspect_ratio(mouth):
    A = np.linalg.norm(mouth[3] - mouth[7])  
    B = np.linalg.norm(mouth[2] - mouth[6])  
    C = np.linalg.norm(mouth[0] - mouth[4]) 
    mar = (A + B) / (2.0 * C)
    return mar


EAR_THRESH = 0.25
MAR_THRESH = 0.7
COUNTER_THRESH = 20
frame_counter = 0


cap = cv2.VideoCapture(0)
while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb_frame)
    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            mp_drawing.draw_landmarks(
                image=frame,
                landmark_list=face_landmarks,
                connections=mp_face_mesh.FACEMESH_TESSELATION,
                landmark_drawing_spec=None,
                connection_drawing_spec=mp_drawing_styles.get_default_face_mesh_tesselation_style())
            h, w, _ = frame.shape
            landmarks = np.array([(lm.x * w, lm.y * h) for lm in face_landmarks.landmark])
            try:
                left_eye = np.array([landmarks[i] for i in LEFT_EYE])
                right_eye = np.array([landmarks[i] for i in RIGHT_EYE])
                mouth = np.array([landmarks[i] for i in MOUTH])

                ear = (eye_aspect_ratio(left_eye) + eye_aspect_ratio(right_eye)) / 2.0
                mar = mouth_aspect_ratio(mouth)

                
                if ear < EAR_THRESH or mar > MAR_THRESH:
                    frame_counter += 1
                    cv2.putText(frame, "DROWSY!!!", (50, 100),
                                cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 255), 3)
                    if frame_counter > COUNTER_THRESH:
                        winsound.Beep(2500, 1000)  
                else:
                    frame_counter = 0
            except Exception as e:
                
                pass
    cv2.imshow('Driver Drowsiness Detection', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
